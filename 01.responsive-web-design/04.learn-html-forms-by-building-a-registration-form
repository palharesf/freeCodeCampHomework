<!-- Homework permalink: https://www.freecodecamp.org/learn/2022/responsive-web-design/learn-html-forms-by-building-a-registration-form/step-1 -->



index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Registration Form</title>
    <link rel="stylesheet" href="styles.css" />
  </head>
  <body>
    <h1>Registration Form</h1>
    <p>Please fill out this form with the required information</p>
    <form method="post" action='https://register-demo.freecodecamp.org'>                      <!-- The method attribute specifies how to send form-data to the URL specified in the action attribute. The form-data can be sent via a GET request as URL parameters (with method="get") or via a POST request as data in the request body (with method="post") -->
      <fieldset>
        <label for="first-name">Enter Your First Name: <input id="first-name" name="first-name" type="text" required /></label>
        <label for="last-name">Enter Your Last Name: <input id="last-name" name="last-name" type="text" required /></label>
        <label for="email">Enter Your Email: <input id="email" name="email" type="email" required /></label>                          
        <label for="new-password">Create a New Password: <input id="new-password" name="new-password" type="password" pattern="[a-z0-5]{8,}" required /></label>    <!-- Certain type attribute values come with built-in form validation. For example, type="email" requires that the value be a valid email address. The password input element can have a minlength attribute with a value of 8. Doing so prevents inputs of less than 8 characters being submitted. With type="password" you can use the pattern attribute to define a regular expression that the password must match to be considered valid. Add a pattern attribute to the password input element to require the input match: [a-z0-5]{8,}. That is a regular expression which matches eight or more lowercase letters or the digits 0 to 5 -->
      </fieldset>
      <fieldset>
        <legend>Account type (required)</legend>
        <label for="personal-account"><input id="personal-account" type="radio" name="account-type" class="inline" checked /> Personal</label>            <!-- You only want one radio input to be selectable at a time. However, the form does not know the radio inputs are related. To relate the radio inputs, give them the same name attribute with a value of account-type. Now, it is not possible to select both radio inputs at the same time -->
        <label for="business-account"><input id="business-account" type="radio" name="account-type" class="inline" /> Business</label>
      </fieldset>
      <fieldset>
        <label for="profile-picture">Upload a profile picture: <input id="profile-picture" type="file" name="file" /></label>                             <!-- The input type file allows an user to upload a file, in this case, an image -->
        <label for="age">Input your age (years): <input id="age" type="number" name="age" min="13" max="120" /></label>
        <label for="referrer">How did you hear about us?
          <select id="referrer" name="referrer">                                                                                                          <!-- Adding a dropdown to the form can be done with a select element, a container for a group of option elements. The option element acts as a label for each dropdown option. Both elements require closing tags -->
            <option value="">(select one)</option>                                                                                                        <!-- Each option needs to be given a value attribute. Without which, the text content of the option will be submitted to the server -->
            <option value="1">freeCodeCamp News</option>
            <option value="2">freeCodeCamp YouTube Channel</option>
            <option value="3">freeCodeCamp Forum</option>
            <option value="4">Other</option>
          </select>
        </label>
        <label for="bio">Provide a bio:
          <textarea id="bio" name="bio" rows="3" cols="30" placeholder="I like coding on the beach..."></textarea>                                        <!-- The textarea element acts like an input element of type text, but comes with the added benefit of being able to receive multi-line text, and an initial number of text rows and columns. It requires a closing tag. To give it an initial size, you can add the rows and cols attributes. The placeholder accepts a text value, which is displayed until the user starts typing -->
        </label>
      </fieldset>
      <label for="terms-and-conditions">
        <input class="inline" id="terms-and-conditions" type="checkbox" required name="terms-and-conditions" /> I accept the <a href="https://www.freecodecamp.org/news/terms-of-service/">terms and conditions</a>
      </label>
      <input type="submit" value="Submit" />                <!-- The first input element with a type of submit is automatically set to submit its nearest parent form element. To handle the form submission, after the last fieldset element add an input element with the type attribute set to submit and the value attribute set to Submit -->
    </form>
  </body>
</html>






styles.css

body {
  width: 100%;
  height: 100vh;                            /* The vh unit stands for viewport height, and is equal to 1% of the height of the viewport. This makes it relative to the viewport height */
  margin: 0;
  background-color: #1b1b32;
  color: #f5f6f7;                           /* The color attribute within a style related to the font color. Eg 'color: #f5f6f7;' */
  font-family: Tahoma;
  font-size: 16px;
}

h1, p {
  margin: 1em auto;
  text-align: center;
}

form {
  width: 60vw;
  max-width: 500px;
  min-width: 300px;
  margin: 0 auto;
  padding-bottom: 2em;
}

fieldset {
  border: none;
  padding: 2rem 0;                         /* The rem unit stands for root em, and is relative to the font size of the html element. As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add display: block to the label element, and add a margin of 0.5rem 0, to separate them from each other */
  border-bottom: 3px solid #3b3b4f;
}

fieldset:last-of-type {                    /* You can select the last element of a specific type using the last-of-type CSS pseudo-class, like this: p:last-of-type { } That will select the last p element */
  border-bottom: none;
}

label {
  display: block;
  margin: 0.5rem 0;
}

input, textarea, select {                /* To have the label text appear above the form elements, select all input, textarea, and select elements, and make them take up the full width of their parent element */
  margin: 10px 0 0 0;
  width: 100%;
  min-height: 2em;
}

input, textarea {
  background-color: #0a0a23;
  border: 1px solid #0a0a23;
  color: #ffffff;
}

.inline {
  width: unset;                         /* Select only the .inline elements, and give them width of unset. This will remove the earlier rule which set all the input elements to width: 100% */
  margin: 0 0.5em 0 0;
  vertical-align: middle;
  display: inline; 
}

input[type="submit"] {                  /* To style the submit button, you can use an attribute selector, which selects an element based on the given attribute value. Here is an example: input[name="password"] That selects input elements with a name attribute value of password */
  display: block;
  width: 60%;
  margin: 1em auto;
  height: 2em;
  font-size: 1.1rem;
  background-color: #3b3b4f;
  border-color: white;
  min-width: 300px;
}

input[type="file"] {
  padding: 1px 2px;
}

a {
  color: #dfdfe2;
}
