Exercise link: https://www.freecodecamp.org/learn/quality-assurance/advanced-node-and-express
Project link: 

A template engine enables you to use static template files (such as those written in Pug) in your app.
At runtime, the template engine replaces variables in a template file with actual values which can be supplied by your server.
Then it transforms the template into a static HTML file that is sent to the client.
This approach makes it easier to design an HTML page and allows for displaying variables on the page without needing to make an API call from the client.

Express needs to know which template engine you are using.
Use the set method to assign pug as the view engine property's value:

    app.set('view engine', 'pug');

After that, add another set method that sets the views property of your app to point to the ./views/pug directory.
This tells Express to render all views relative to that directory.
Finally, use res.render() in the route for your home page, passing index as the first argument.
This will render the pug template.

One of the greatest features of using a template engine is being able to pass variables from the server to the template file before rendering it to HTML.
In your Pug file, you're able to use a variable by referencing the variable name as #{variable_name} inline with other text on an element or by using an equal sign on the element without a space such as p=variable_name which assigns the variable's value to the p element's text.
Pug is all about using whitespace and tabs to show nested elements and cutting down on the amount of code needed to make a beautiful site.

Your index.pug file included in your project, uses the variables title and message.
Pass those from your server to the Pug file by adding an object as a second argument to your res.render call with the variables and their values.

    res.render('index', { title: 'Hello', message: 'Please log in' });

It's time to set up Passport so you can finally start allowing a user to register or log in to an account.
In addition to Passport, you will use Express-session to handle sessions.
Express-session has a ton of advanced features you can use, but for now you are just going to use the basics.
Using this middleware saves the session id as a cookie in the client, and allows us to access the session data using that id on the server.
This way, you keep personal account information out of the cookie used by the client to tell to your server clients are authenticated and keep the key to access the data stored on the server.

You will need to set up the session settings and initialize Passport.
First, create the variables session and passport to require express-session and passport respectively.
Then, set up your Express app to use the session by defining the following options:

    app.use(session({
    secret: process.env.SESSION_SECRET,
    resave: true,
    saveUninitialized: true,
    cookie: { secure: false }
    }));

Be sure to add SESSION_SECRET to your .env file, and give it a random value.
This is used to compute the hash used to encrypt your cookie!
After you do all that, tell your express app to use passport.initialize() and passport.session().

Serialization and deserialization are important concepts in regard to authentication.
To serialize an object means to convert its contents into a small key that can then be deserialized into the original object.
This is what allows us to know who has communicated with the server without having to send the authentication data, like the username and password, at each request for a new page.
To set this up properly, you need to have a serialize function and a deserialize function. In Passport, these can be created with:

    passport.serializeUser(cb);
    passport.deserializeUser(cb);

The callback function passed to serializeUser is called with two arguments: the full user object, and a callback used by passport.
The callback expects two arguments: An error, if any, and a unique key to identify the user that should be returned in the callback. 
You will use the user's _id in the object. This is guaranteed to be unique, as it is generated by MongoDB.

Similarly, deserializeUser is called with two arguments: the unique key, and a callback function.
This callback expects two arguments: An error, if any, and the full user object. To get the full user object, make a query search for a Mongo _id, as shown below:

    passport.serializeUser((user, done) => {
        done(null, user._id);
    });

    passport.deserializeUser((id, done) => {
        myDataBase.findOne({ _id: new ObjectID(id) }, (err, doc) => {
            done(null, null);
        });
    });

The ObjectID class comes from the mongodb package. Declare this class with:

    const { ObjectID } = require('mongodb');

You are not loading an actual user object since the database is not set up.
Connect to the database once, when you start the server, and keep a persistent connection for the full life-cycle of the app.
To do this, add your database's connection string (for example: mongodb+srv://<username>:<password>@cluster0-jvwxi.mongodb.net/?retryWrites=true&w=majority) to the environment variable MONGO_URI.
This is used in the connection.js file.

Now you want to connect to your database, then start listening for requests.
The purpose of this is to not allow requests before your database is connected or if there is a database error.
To accomplish this, encompass your serialization and app routes in the following code:

    myDB(async client => {
        const myDataBase = await client.db('database').collection('users');

        // Be sure to change the title
        app.route('/').get((req, res) => {
            // Change the response to render the Pug template
            res.render('index', {
                title: 'Connected to Database',
                message: 'Please login'
            });
        });

        // Serialization and deserialization here...

        // Be sure to add this...
        }).catch(e => {
            app.route('/').get((req, res) => {
                res.render('index', { title: e, message: 'Unable to connect to database' });
        });
    });
    // app.listen out here...

A strategy is a way of authenticating a user. 
You can use a strategy for allowing users to authenticate based on locally saved information (if you have them register first) or from a variety of providers such as Google or GitHub.
For this project, we will use Passport middleware.
Passport provides a comprehensive set of strategies that support authentication using a username and password, GitHub, Google, and more.

passport-local@~1.0.0 has already been added as a dependency. Add it to your server as follows:

    const LocalStrategy = require('passport-local');

Make sure this (as well as everything from this point on) is encapsulated in the database connection since it relies on it!:

    passport.use(new LocalStrategy((username, password, done) => {
        myDataBase.findOne({ username: username }, (err, user) => {
            console.log(`User ${username} attempted to log in.`);
            if (err) return done(err);
            if (!user) return done(null, false);
            if (password !== user.password) return done(null, false);
            return done(null, user);
        });
    }));

This is defining the process to use when you try to authenticate someone locally.
First, it tries to find a user in your database with the username entered.
Then, it checks for the password to match.
Finally, if no errors have popped up that you checked for (e.g. an incorrect password), the user object is returned and they are authenticated.
Many strategies are set up using different settings.
Generally, it is easy to set it up based on the README in that strategy's repository.
A good example of this is the GitHub strategy where you don't need to worry about a username or password because the user will be sent to GitHub's auth page to authenticate.
As long as they are logged in and agree then GitHub returns their profile for you to use.

In the index.pug file supplied, there is a login form.
It is hidden because of the inline JavaScript if showLogin with the form indented after it.

In the res.render for that page, add a new variable to the object, showLogin: true.
When you refresh your page, you should then see the form!
This form is set up to POST on /login.
So, this is where you should set up to accept the POST request and authenticate the user.

To authenticate on the /login POST route, you need to add a middleware to do so before then sending a response.
This is done by just passing another argument with the middleware before with your response.
The middleware to use is passport.authenticate('local').

passport.authenticate can also take some options as an argument such as { failureRedirect: '/' } which is incredibly useful, so be sure to add that in as well.
Add a response after using the middleware (which will only be called if the authentication middleware passes) that redirects the user to /profile.
If the authentication was successful, the user object will be saved in req.user.
At this point, if you enter a username and password in the form, it should redirect to the home page /, and the console of your server should display 'User {USERNAME} attempted to log in.', since we currently cannot login a user who isn't registered.

As is, any user can just go to /profile whether they have authenticated or not by typing in the URL.
You want to prevent this by checking if the user is authenticated first before rendering the profile page.
This is the perfect example of when to create a middleware.
The challenge here is creating the middleware function ensureAuthenticated(req, res, next), which will check if a user is authenticated by calling Passport's isAuthenticated method on the request which checks if req.user is defined.
If it is, then next() should be called. Otherwise, you can just respond to the request with a redirect to your homepage to login.

An implementation of this middleware is:

    function ensureAuthenticated(req, res, next) {
        if (req.isAuthenticated()) {
            return next();
        }
        res.redirect('/');
    };

Create the above middleware function, then pass ensureAuthenticated as middleware to requests for the profile page before the argument to the GET request:

    app
        .route('/profile')
        .get(ensureAuthenticated, (req,res) => {
            res.render('profile');
        });

Now that you can ensure the user accessing the /profile is authenticated, you can use the information contained in req.user on your page.
Pass an object containing the property username and value of req.user.username as the second argument for the render method of the profile view.
Then, go to your profile.pug view, and add the following line below the existing h1 element, and at the same level of indentation:

    h2.center#welcome Welcome, #{username}!

This creates an h2 element with the class center and id welcome containing the text Welcome, followed by the username.
Also, in profile.pug, add a link referring to the /logout route, which will host the logic to unauthenticate a user:

    a(href='/logout') Logout

Creating the logout logic is easy.
The route should just unauthenticate the user, and redirect to the home page instead of rendering any view.
In passport, unauthenticating a user is as easy as just calling req.logout() before redirecting. Add this /logout route to do that:

    app.route('/logout')
        .get((req, res) => {
            req.logout();
            res.redirect('/');
        });

You may have noticed that you are not handling missing pages (404).
The common way to handle this in Node is with the following middleware.
Go ahead and add this in after all your other routes:

    app.use((req, res, next) => {
        res.status(404)
            .type('text')
            .send('Not Found');
        });


