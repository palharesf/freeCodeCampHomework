Exercise link: https://www.freecodecamp.org/learn/relational-database/learn-relational-databases-by-building-a-mario-database/build-a-mario-database
Gitpod link: https://gitpod.io/start/#freecodecam-learnrelati-2wt0xrgu3lx

Command cheat sheet:

\l
\c database_name
\d table_name

CREATE DATABASE database_name;
CREATE TABLE table_name();
CREATE TABLE table_name(column_name DATATYPE CONSTRAINTS);
CREATE SEQUENCE my_serial AS integer START 1 OWNED BY address.new_id; 

ALTER DATABASE database_name RENAME TO new_database_name;

ALTER TABLE table_name ADD COLUMN column_name DATATYPE;
ALTER TABLE table_name ADD COLUMN column_name SERIAL PRIMARY_KEY;
ALTER TABLE table_name ADD COLUMN column_name DATATYPE REFERENCES referenced_table_name(referenced_column_name);
ALTER TABLE table_name ADD COLUMN column_name DATATYPE CONSTRAINT REFERENCES referenced_table_name(referenced_column_name); 
ALTER TABLE table_name ADD PRIMARY KEY(column_name);
ALTER TABLE table_name ADD PRIMARY KEY(column1, column2);
ALTER TABLE table_name ADD FOREIGN KEY(column_name) REFERENCES referenced_table(referenced_column);
ALTER TABLE table_name ADD UNIQUE(column_name);
ALTER TABLE table_name DROP COLUMN column_name;
ALTER TABLE table_name DROP CONSTRAINT constraint_name;
ALTER TABLE table_name RENAME COLUMN column_name TO new_name;
ALTER TABLE table_name RENAME TO new_table_name;
ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL; #good for constraints
ALTER TABLE table_name ALTER COLUMN column_name TYPE DATATYPE; 
ALTER TABLE address ALTER COLUMN new_id SET DEFAULT nextval('my_serial');

INSERT INTO table_name(column_1, column_2) VALUES(value1, value2), (value3, value4);
INSERT INTO second_table(id, username) VALUES(1, 'Samus');

UPDATE <table> SET <column> = <value> WHERE <condition> AND <condition>
UPDATE table_name SET column_name=new_value WHERE condition OR <condition>;

SELECT columns FROM table_name;
SELECT columns FROM table_name ORDER BY column_name;
SELECT columns FROM table_name WHERE condition;
SELECT columns FROM table_1 FULL JOIN table_2 ON table_1.primary_key_column = table_2.foreign_key_column;
SELECT columns FROM junction_table;
SELECT columns FROM table_1 LEFT JOIN table_2 USING (foreign_key_column);
SELECT columns FROM table_1 LEFT JOIN table_2 USING (foreign_key_column) WHERE condition_1 AND condition_2;

FULL JOIN table_1 ON junction_table.foreign_key_column = table_1.primary_key_column
FULL JOIN table_2 ON junction_table.foreign_key_column = table_2.primary_key_column;

DELETE FROM table_name WHERE condition;
DROP TABLE table_name;

One of the conditions worth knowing is the IS NULL; you don't need the equal operator here:
    WHERE column_name_1 = 'reference_value' AND column_name_2 IS NULL
