// Exercise permalink: https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures-v8/learn-basic-javascript-by-building-a-role-playing-game/step-1

//We'll start adding JavaScript to our HTML files, using the '<script></script>' notation. Usually we link our script from an external file using the 'src="./script.js"' attribute. It is advisable to place the <script> element at the end of the <body> element, so the page finished loading before you start querying it for information used on your script
/*JavaScript interacts with the HTML using the Document Object Model, or DOM. The DOM is a tree of objects that represents the HTML. You can access the HTML using the document object, which represents your entire HTML document. One method for finding specific elements in your HTML is using the querySelector() method. The querySelector() method takes a CSS selector as an argument and returns the first element that matches that selector. For example, to find the <h1> element in your HTML, you would write:

let h1 = document.querySelector("h1");

Note that h1 is a string and matches the CSS selector you would use*/
// Since button1 is a variable that is not going to be reassigned, it is best practice to use the const keyword to declare it instead of the let keyword. This will tell JavaScript to throw an error if you accidentally reassign it
// You can hide CSS elements using a 'display:none' propery
// button1 represents your first button element. These elements have a special property called onclick, which you can use to determine what happens when someone clicks that button
// Reminder: when we're initializing a button (onclick), we should not call a function (i.e. we should not add the parenthesis)
// The innerText function changes the content of a <p></p> element on HTML when called
// When formatting text in JS, you can add double quotes to printed text by using backslash as an "escape" method. Here is an example: 'const escapedString = "Naomi likes to play \"Zelda\" sometimes.";'
/* Objects are non primitive data types that store key-value pairs. Non primitive data types are mutable data types that are not undefined, null, boolean, number, string, or symbol. Mutable means that the data can be changed after it is created.

Here is the basic syntax for an object:
Example Code

{
  key: value
} 

Objects are similar to arrays, except that instead of using indexes to access and modify their data, you access the data in objects through properties.
Properties consist of a key and a value. The key is the name of the property, and the value is the data stored in the property.*/