Exercise link: https://www.freecodecamp.org/learn/back-end-development-and-apis/#basic-node-and-express
Dependencies:
Gitpod link:

MongoDB is a database application that stores JSON documents (or records) that you can use in your application. 
Unlike SQL, another type of database, MongoDB is a non-relational or "NoSQL" database. 
This means MongoDB stores all associated data within one record, instead of storing it across many preset tables as in a SQL database.

Mongoose is a popular npm package for interacting with MongoDB. 
With Mongoose, you can use plain JavaScript objects instead of JSON, which makes it easier to work with MongoDB. 
Also, it allows you to create blueprints for your documents called schemas, so you don't accidentally save the wrong type of data and cause bugs later.

CRUD Part I - CREATE

First of all, we need a Schema. Each schema maps to a MongoDB collection. It defines the shape of the documents within that collection.
Schemas are building blocks for Models. They can be nested to create complex models, but in this case, we'll keep things simple.
A model allows you to create instances of your objects, called documents.

Gitpod is a real server, and in real servers, the interactions with the database happen in handler functions.
These functions are executed when some event happens (e.g. someone hits an endpoint on your API). Weâ€™ll follow the same approach in these exercises.
The done() function is a callback that tells us that we can proceed after completing an asynchronous operation such as inserting, searching, updating, or deleting.
It's following the Node convention, and should be called as done(null, data) on success, or done(err) on error.

Warning - When interacting with remote services, errors may occur!

/* Example */

    const someFunc = function(done) {
    //... do something (risky) ...
    if (error) return done(error);
    done(null, result);
    };


