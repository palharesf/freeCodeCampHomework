Exercise link: https://www.freecodecamp.org/learn/back-end-development-and-apis/#basic-node-and-express
Dependencies: 06_backend_dev_and_api/03
Gitpod link: https://gitpod.io/start/#freecodecam-boilerplate-te4egzxzl1t
MongoDB link: https://cloud.mongodb.com/v2/67366b68d149cd63fd37ac24#/clusters/detail/Cluster0

MongoDB is a database application that stores JSON documents (or records) that you can use in your application. 
Unlike SQL, another type of database, MongoDB is a non-relational or "NoSQL" database. 
This means MongoDB stores all associated data within one record, instead of storing it across many preset tables as in a SQL database.

Mongoose is a popular npm package for interacting with MongoDB. 
With Mongoose, you can use plain JavaScript objects instead of JSON, which makes it easier to work with MongoDB. 
Also, it allows you to create blueprints for your documents called schemas, so you don't accidentally save the wrong type of data and cause bugs later.

CRUD Part I - CREATE

First of all, we need a Schema. Each schema maps to a MongoDB collection. It defines the shape of the documents within that collection.
Schemas are building blocks for Models. They can be nested to create complex models, but in this case, we'll keep things simple.
A model allows you to create instances of your objects, called documents.

For instance, the following code:

    const personSchema = new Schema({
        name: { type: String, required: true },
        age: Number,
        favoriteFoods: [String]
    });

Creates a personSchema with three properties: name, with type String and required; age, with type Number; and favoriteFoods, a String array
You can then create models from the schema:

    const Person = mongoose.model("Person", personSchema);

The model is then stored in a variable (the first 'Person' here), and a Collection is created in the database pluralizing the name given to it (the second 'People' here)

Gitpod is a real server, and in real servers, the interactions with the database happen in handler functions.
These functions are executed when some event happens (e.g. someone hits an endpoint on your API). Weâ€™ll follow the same approach in these exercises.
The done() function is a callback that tells us that we can proceed after completing an asynchronous operation such as inserting, searching, updating, or deleting.
It's following the Node convention, and should be called as done(null, data) on success, or done(err) on error. For example:

    const someFunc = function(done) {
        //... do something (risky) ...
        if (error) return done(error);
        done(null, result);
    };

The way it works is by reserving space for the error checking ('errorSpace'), followed by space for the actual payload ('goodStuffSpace'):

    done(errorSpace, goodStuffSpace)

    // When everything goes well:
        done(null, user)
    // This is like saying: "No problems! ðŸ˜Š Here's your user data!"

    // When there's an error:
        done(error, null)
    // This is like saying: "Oops, we had a problem! ðŸ˜• No data to give you."

The done callback follows this pattern because it's a standard way in Node.js to handle errors first, it makes it very clear whether the operation succeeded or failed, and if there's no error (null), we know we can safely use the data

If we want to create records in our database, we create a new variable containing our record, which is based on our previously created model:

    const newUser = new Person(
        {
            name: "new User",
            age: 13,
            favoriteFoods: ["Sushi"]
        }
    );

We can then call the .save method on that variable, using the done(null, data) convention for data consistency:

    newUser.save(function(err, data) {
        if (err) return console.error(err);
        done(null, data)
    });

If we need to create many documents at once, e.g. when seeding a database with initial data, we can use Model.create() (where Model is the name of the Model, not a standard name)
It takes an array of objects like [{name: 'John', ...}, {...}, ...] as the first argument, and saves them all in the db. For instance:

    const createManyPeople = (arrayOfPeople, done) => {
        Person.create(
            arrayOfPeople, function(err, data) {
                if (err) return console.error(err);
                done(null, data)
            }
        )
    };

In its simplest usage, Model.find() accepts a query document (a JSON object) as the first argument, then a callback.
It returns an array of matches. It supports an extremely wide range of search options.

    const findPeopleByName = (personName, done) => {
        Person.find(
            {name: personName},
            function(err, data) {
                if (err) return console.error(err);
                done(null, data);
            }
        ).exec();
    };

Model.findOne() behaves like Model.find(), but it returns only one document (not an array), even if there are multiple items.
It is especially useful when searching by properties that you have declared as unique.

    const findOneByFood = (food, done) => {
        Person.findOne(
            {favoriteFoods: food},
            function(err, data) {
                if (err) return console.error(err);
                done(null, data);
            }
        ).exec();
    };

When saving a document, MongoDB automatically adds the field _id, and set it to a unique alphanumeric key.
Searching by _id is an extremely frequent operation, so Mongoose provides a dedicated method for it.

    const findPersonById = (personId, done) => {
        Person.findById(
            personId,
            function(err, data) {
                if (err) return console.error(err);
                done(null, data);
            }
        ).exec();
    };

Mongoose has a dedicated updating method: Model.update(). It is bound to the low-level mongo driver.
It can bulk-edit many documents matching certain criteria, but it doesnâ€™t send back the updated document, only a 'status' message.
Furthermore, it makes model validations difficult, because it just directly calls the mongo driver.

One manual way of updating data is by chaining find() -> edit() -> save();
It takes a few more lines, but it allows for fine-tuned control of what's happening to the data at each step of the process and allow for intermediate error-catching:
 
    const findEditThenSave = (personId, done) => {
        const foodToAdd = "hamburger";
        Person.findById(
            personId,
            function(err, data) {
                if (err) return console.error(err);
                data.favoriteFoods.push(foodToAdd);
                data.save(
                    function(err, data) {
                        if (err) return console.error(err);
                        done(null, data)
                    }
                );
            }
        ).exec();
    };

Other methods are avaialble on recent versions of Mongoose to simplify documents updating.
Some more advanced features (i.e. pre/post hooks, validation) behave differently with this approach, so the classic method is still useful in many situations.
findByIdAndUpdate() can be used when searching by id, or findOneAndUpdate() when using other parameters for the search:

    const findAndUpdate = (personName, done) => {
        const ageToSet = 20;

        Person.findOneAndUpdate(
            {name: personName},
            {age: ageToSet},
            {new: true},
            function(err, data) {
                if (err) return console.error(err);
                done(null, data);
            }
        ).exec();
    };

Similarly, we have removal methods like findByIdAndRemove and findOneAndRemove linked to the previous update methods.
They pass the removed document to the db. As usual, use the function argument personId as the search key:

    const removeById = (personId, done) => {
        Person.findByIdAndRemove(
            personId,
            function(err, data) {
                if (err) return console.error(err);
                done(null, data);
            }
        )
    };



