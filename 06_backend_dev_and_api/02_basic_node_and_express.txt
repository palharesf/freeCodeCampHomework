Exercise link: https://www.freecodecamp.org/learn/back-end-development-and-apis/basic-node-and-express/meet-the-node-console
Dependencies:
Gitpod link: 

Node.js is a JavaScript runtime that allows developers to write backend (server-side) programs in JavaScript.
Node.js comes with a handful of built-in modules — small, independent programs — that help with this.
Some of the core modules include HTTP, which acts like a server, and File System, a module to read and modify files.

Express is a lightweight web application framework, and is one of the most popular packages on npm.
Express makes it much easier to create a server and handle routing for your application, which handles things like directing people to the correct page when they visit a certain endpoint like /blog.

Node is just a JavaScript environment. Like client side JavaScript, you can use the console to display useful debug information.
It is recommended to keep the terminal open during development. By reading the output in the terminal, you can see any errors that may occur.
The server must be restarted after making changes to its files.
If the server is stopped (Ctrl + C), you can start it using Node directly (node mainEntryFile.js) or using a run script in the package.json file with npm run.

For example, the "start": "node server.js" script would be run from the terminal using 

    npm run start

To implement server auto restarting on file save Node provides the --watch flag you can add to your start script 

    "start": "node --watch server.js"

or you can install an npm package like nodemon

In the first two lines of the file myApp.js, you can see how easy it is to create an Express app object.
This object has several methods, and you will learn many of them in these challenges.
One fundamental method is

    app.listen(port)

It tells your server to listen on a given port, putting it in running state. 

In Express, routes takes the following structure:

    app.METHOD(PATH, HANDLER)

METHOD is an http method in lowercase. PATH is a relative path on the server (it can be a string, or even a regular expression).
HANDLER is a function that Express calls when the route is matched.
Handlers take the form function(req, res) {...}, where req is the request object, and res is the response object. For example, the handler

    function(req, res) {
        res.send('Response String');
    }

will serve the string 'Response String'.

You can respond to requests with a file using the res.sendFile(path) method.
You can put it inside the app.get('/', ...) route handler.
Behind the scenes, this method will set the appropriate headers to instruct your browser on how to handle the file you want to send, according to its type.
Then it will read and send the file. This method needs an absolute file path.
We recommend you to use the Node global variable __dirname to calculate the path like this:

    absolutePath = __dirname + '/relativePath/file.ext'

An HTML server usually has one or more directories that are accessible by the user.
You can place there the static assets needed by your application (stylesheets, scripts, images).
In Express, you can put in place this functionality using the middleware

    express.static(path)

where the path parameter is the absolute path of the folder containing the assets.
Basically, middleware are functions that intercept route handlers, adding some kind of information.
A middleware needs to be mounted using the method app.use(path, middlewareFunction). The first path argument is optional. If you don’t pass it, the middleware will be executed for all requests.




